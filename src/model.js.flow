// @flow strict
import type { Result } from '@lukekaalim/result';
import type { CastFailure, InternalFailure } from './failures';

export type Model<T> = {
  from: mixed => Result<T, InternalFailure> | Result<T, CastFailure>,
};

export type NamedModel<T> = Model<T> & {
  name: string,
};

declare export var stringModel: Model<string>;
declare export var numberModel: Model<number>;
declare export var booleanModel: Model<boolean>;

declare export function modelObject<Map>(map: Map): Model<$ObjMap<Map, <V, Y>({ from: () => Result<V, Y> }) => V>>;
declare export function modelArray<Element>(element: Model<Element>): Model<Array<Element>>;

declare export function nameModel<T>(name: string, model: Model<T>): NamedModel<T>;
